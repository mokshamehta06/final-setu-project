<%- include('../partials/header') %>

<div class="container mt-5 mb-5">
  <div class="row">
    <div class="col-lg-8">
      <div class="card shadow-sm mb-4">
        <div class="card-header bg-primary text-white">
          <h5 class="mb-0">Shopping Cart</h5>
        </div>
        <div class="card-body">
          <% if (cart && cart.items && cart.items.length > 0) { %>
            <div class="table-responsive">
              <table class="table table-hover">
                <thead>
                  <tr>
                    <th>Product</th>
                    <th>Price</th>
                    <th>Quantity</th>
                    <th>Total</th>
                    <th></th>
                  </tr>
                </thead>
                <tbody>
                  <% cart.items.forEach(item => { %>
                    <tr data-product-id="<%= item.product %>">
                      <td>
                        <div class="d-flex align-items-center">
                          <img src="<%= item.image %>" alt="<%= item.name %>" class="img-thumbnail me-3" style="width: 60px; height: 60px; object-fit: cover;">
                          <div>
                            <h6 class="mb-0"><%= item.name %></h6>
                          </div>
                        </div>
                      </td>
                      <td>₹<%= item.price.toFixed(2) %></td>
                      <td>
                        <div class="input-group input-group-sm" style="width: 120px;">
                          <button class="btn btn-outline-secondary quantity-btn" data-action="decrease">-</button>
                          <input type="number" class="form-control text-center quantity-input" value="<%= item.quantity %>" min="1" max="99">
                          <button class="btn btn-outline-secondary quantity-btn" data-action="increase">+</button>
                        </div>
                      </td>
                      <td>₹<%= (item.price * item.quantity).toFixed(2) %></td>
                      <td>
                        <button class="btn btn-sm btn-outline-danger remove-item-btn">
                          <i class="bi bi-trash"></i>
                        </button>
                      </td>
                    </tr>
                  <% }) %>
                </tbody>
              </table>
            </div>
            <div class="d-flex justify-content-between mt-3">
              <button id="clearCartBtn" class="btn btn-outline-danger">
                <i class="bi bi-trash me-2"></i> Clear Cart
              </button>
              <a href="/customer/browsing" class="btn btn-outline-primary">
                <i class="bi bi-arrow-left me-2"></i> Continue Shopping
              </a>
            </div>
          <% } else { %>
            <div class="text-center py-5">
              <i class="bi bi-cart-x" style="font-size: 4rem; color: #ccc;"></i>
              <h4 class="mt-3">Your cart is empty</h4>
              <p class="text-muted">Looks like you haven't added any products to your cart yet.</p>
              <a href="/customer/browsing" class="btn btn-primary mt-2">Start Shopping</a>
            </div>
          <% } %>
        </div>
      </div>
    </div>
    
    <div class="col-lg-4">
      <div class="card shadow-sm mb-4">
        <div class="card-header bg-primary text-white">
          <h5 class="mb-0">Order Summary</h5>
        </div>
        <div class="card-body">
          <% if (cart && cart.items && cart.items.length > 0) { %>
            <div class="d-flex justify-content-between mb-2">
              <span>Subtotal</span>
              <span>₹<%= cart.totalAmount.toFixed(2) %></span>
            </div>
            <div class="d-flex justify-content-between mb-2">
              <span>Tax (10%)</span>
              <span>₹<%= (cart.totalAmount * 0.1).toFixed(2) %></span>
            </div>
            <div class="d-flex justify-content-between mb-2">
              <span>Shipping</span>
              <span>₹50.00</span>
            </div>
            <hr>
            <div class="d-flex justify-content-between mb-3">
              <strong>Total</strong>
              <strong>₹<%= (cart.totalAmount + (cart.totalAmount * 0.1) + 50).toFixed(2) %></strong>
            </div>
            <div class="d-grid">
              <a href="/customer/checkout" class="btn btn-primary">
                Proceed to Checkout
              </a>
            </div>
          <% } else { %>
            <div class="text-center py-3">
              <p class="text-muted mb-0">Add items to your cart to see the order summary.</p>
            </div>
          <% } %>
        </div>
      </div>
      
      <div class="card shadow-sm">
        <div class="card-header">
          <h6 class="mb-0">Have a Coupon?</h6>
        </div>
        <div class="card-body">
          <div class="input-group mb-0">
            <input type="text" class="form-control" placeholder="Enter coupon code">
            <button class="btn btn-outline-primary" type="button">Apply</button>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Handle quantity changes
    document.querySelectorAll('.quantity-btn').forEach(button => {
      button.addEventListener('click', function() {
        const row = this.closest('tr');
        const productId = row.dataset.productId;
        const input = row.querySelector('.quantity-input');
        let quantity = parseInt(input.value);
        
        if (this.dataset.action === 'increase') {
          quantity += 1;
        } else if (this.dataset.action === 'decrease') {
          quantity = Math.max(1, quantity - 1);
        }
        
        input.value = quantity;
        updateCartItem(productId, quantity);
      });
    });
    
    // Handle direct quantity input
    document.querySelectorAll('.quantity-input').forEach(input => {
      input.addEventListener('change', function() {
        const row = this.closest('tr');
        const productId = row.dataset.productId;
        let quantity = parseInt(this.value);
        
        // Ensure quantity is at least 1
        quantity = Math.max(1, quantity);
        this.value = quantity;
        
        updateCartItem(productId, quantity);
      });
    });
    
    // Handle remove item
    document.querySelectorAll('.remove-item-btn').forEach(button => {
      button.addEventListener('click', function() {
        const row = this.closest('tr');
        const productId = row.dataset.productId;
        
        removeCartItem(productId);
      });
    });
    
    // Handle clear cart
    const clearCartBtn = document.getElementById('clearCartBtn');
    if (clearCartBtn) {
      clearCartBtn.addEventListener('click', function() {
        if (confirm('Are you sure you want to clear your cart?')) {
          clearCart();
        }
      });
    }
    
    // Function to update cart item
    function updateCartItem(productId, quantity) {
      fetch('/api/cart/update', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ productId, quantity })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          // Reload the page to reflect changes
          location.reload();
        } else {
          alert(data.message);
        }
      })
      .catch(error => {
        console.error('Error updating cart:', error);
        alert('Failed to update cart. Please try again.');
      });
    }
    
    // Function to remove cart item
    function removeCartItem(productId) {
      fetch(`/api/cart/remove/${productId}`, {
        method: 'DELETE'
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          // Reload the page to reflect changes
          location.reload();
        } else {
          alert(data.message);
        }
      })
      .catch(error => {
        console.error('Error removing item:', error);
        alert('Failed to remove item. Please try again.');
      });
    }
    
    // Function to clear cart
    function clearCart() {
      fetch('/api/cart/clear', {
        method: 'DELETE'
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          // Reload the page to reflect changes
          location.reload();
        } else {
          alert(data.message);
        }
      })
      .catch(error => {
        console.error('Error clearing cart:', error);
        alert('Failed to clear cart. Please try again.');
      });
    }
  });
</script>

<%- include('../partials/footer') %>

